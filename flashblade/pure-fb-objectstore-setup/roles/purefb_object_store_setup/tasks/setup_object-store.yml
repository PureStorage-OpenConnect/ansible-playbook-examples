---
- name: Account | Create s3 account on {{ outer_loop.key }}
  purestorage.flashblade.purefb_s3acc:
    name: "{{ s3_var.account }}"
    state: "{{ 'absent' if s3_var.delete_account is defined and s3_var.delete_account | bool else 'present' }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"

- name: User | Create s3 user on {{ outer_loop.key }}
  purestorage.flashblade.purefb_s3user:
    name: "{{ item.name }}"
    account: "{{ s3_var.account }}"
    access_key: "{{ item.create_new_access_key | default(omit) }}"
    state: "{{ 'absent' if item.delete_user is defined and item.delete_user | bool else 'present' }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"
  register: user_info
  loop: "{{ s3_var.users | default([]) }}"
  when: item is defined

- name: Facts | Set s3_user_info fact {{ outer_loop.key }}
  ansible.builtin.set_fact:
    s3_user_info: "{{ item.s3user_info }}"
  loop: "{{ user_info.results }}"
  when: item.s3user_info is defined and item.s3user_info|length > 0

- name: Store s3 secrets in a file
  when:
    - s3_user_info is defined

  block:
    - name: Secrets | Create s3_secrets directory at vars/{{ env }}
      ansible.builtin.file:
        dest: "{{ playbook_dir }}/vars/{{ env }}/s3_secrets"
        state: directory
        mode: "0600"

    - name: Secrets | Write S3 secrets in a file
      ansible.builtin.copy:
        content: "{{ item.s3user_info.fb_s3user | to_nice_yaml }}"
        dest: "{{ playbook_dir }}/vars/{{ env }}/s3_secrets/{{ item.s3user_info.fb_s3user.user | replace('/', '_') }}.yml"
        mode: preserve
        backup: true
      loop: "{{ user_info.results }}"
      when: item.s3user_info is defined and item.s3user_info | length > 0
      delegate_to: localhost
      no_log: true

    - name: Encrypt | Block to encrypt s3 secrets file
      block:
        - name: Secrets | Create tmp file to hold ansible vault password
          ansible.builtin.file:
            dest: /tmp/ansible_pass
            state: touch
            mode: "0600"

        - name: Secrets | Store ansible-vault password in a file
          ansible.builtin.copy:
            content: "{{ s3_ansible_vault_pass | default('pureansible') }}"
            dest: /tmp/ansible_pass
            mode: preserve
          delegate_to: localhost
          no_log: true

        - name: Check if s3 secrets file exists
          ansible.builtin.stat:
            path: "{{ playbook_dir }}/vars/{{ env }}/s3_secrets"
          register: s3_secrets_file

        - name: Encrypt | Encrypt s3 secrets file
          ansible.builtin.command: >
            ansible-vault encrypt  "{{ item }}"  --vault-password-file /tmp/ansible_pass
          with_fileglob: "{{ playbook_dir }}/vars/{{ env }}/s3_secrets/*"
          when: s3_secrets_file.stat.exists | bool
          failed_when: false
          changed_when: false
          no_log: true
      always:
        - name: Secrets | Delete ansible vault password file
          ansible.builtin.file:
            dest: /tmp/ansible_pass
            state: absent
- name: Bucket | Create bucket on {{ outer_loop.key }}
  purestorage.flashblade.purefb_bucket:
    name: "{{ item.name }}"
    account: "{{ s3_var.account }}"
    versioning: "{{ item.versioning | default(omit) }}"
    state: "{{ 'absent' if item.destroy_bucket is defined and item.destroy_bucket | bool else 'present' }}"
    eradicate: "{{ item.eradicate | default(omit) }}"
    fb_url: "{{ fb_vars.fb_host }}"
    api_token: "{{ fb_vars.api_token }}"
  loop: "{{ s3_var.buckets | default([]) }}"
  when: item is defined
