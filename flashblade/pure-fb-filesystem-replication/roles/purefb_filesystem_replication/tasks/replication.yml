---
- name: Facts | Combine array_inventory and array_secrets for {{ repl_loop.key }}
  ansible.builtin.set_fact:
    combined_inventory: "{{ array_inventory | combine(array_secrets, recursive=True) }}"
  run_once: true
  no_log: true

- name: Validation | Fail if source Flashblade server not exist in replication for {{ repl_loop.key }}
  ansible.builtin.fail:
    msg: FB server {{ repl_vars.src.fb_name }} not available in fb_details
  when: repl_vars.src.fb_name not in array_inventory

- name: Validation | Fail if target Flashblade server not exist in replication for {{ repl_loop.key }}
  ansible.builtin.fail:
    msg: FB server {{ repl_vars.dst.fb_name }} not available in fb_details
  when: repl_vars.dst.fb_name not in array_inventory

- name: Facts | Set source and target facts for {{ repl_loop.key }}
  ansible.builtin.set_fact:
    src_fb_url: "{{ combined_inventory[repl_vars.src.fb_name].fb_host }}"
    src_fb_token: "{{ combined_inventory[repl_vars.src.fb_name].api_token }}"
    dst_fb_url: "{{ combined_inventory[repl_vars.dst.fb_name].fb_host }}"
    dst_fb_token: "{{ combined_inventory[repl_vars.dst.fb_name].api_token }}"
  no_log: true

- name: Validation | Check if reachable fb_host is FB server or not to fail fast
  ansible.builtin.uri:
    url: https://{{ src_fb_url }}/api/api_version
    method: GET
    validate_certs: false
    return_content: true
    timeout: 10
  register: api_version
  failed_when: false

- name: Validation | Fail if Flashblade server mentioned in "fb_host" is not FlashBlade server
  ansible.builtin.fail:
    msg: FB server {{ src_fb_url }} is not valid FlashBlade server
  when: (api_version.status != 200 )

- name: Validation | Check if reachable fb_host is FB server or not to fail fast
  ansible.builtin.uri:
    url: https://{{ dst_fb_url }}/api/api_version
    method: GET
    validate_certs: false
    return_content: true
    timeout: 10
  register: api_version
  failed_when: false

- name: Validation | Fail if Flashblade server mentioned in "fb_host" is not FlashBlade server
  ansible.builtin.fail:
    msg: FB server {{ dst_fb_url }} is not valid FlashBlade server
  when: (api_version.status != 200 )

- name: Facts | Get information from src FB server for {{ repl_loop.key }}
  purestorage.flashblade.purefb_info:
    gather_subset:
      - minimum
      - replication
      - network
    fb_url: "{{ src_fb_url }}"
    api_token: "{{ src_fb_token }}"
  run_once: true
  register: src_fb_info

- name: Facts | Get information from dst FB server for {{ repl_loop.key }}
  purestorage.flashblade.purefb_info:
    gather_subset:
      - minimum
      - replication
      - network
    fb_url: "{{ dst_fb_url }}"
    api_token: "{{ dst_fb_token }}"
  run_once: true
  register: dst_fb_info

- name: Facts | Set src fb name and dst fb name for {{ repl_loop.key }}
  ansible.builtin.set_fact:
    src_fb_name: "{{ src_fb_info.purefb_info.default.flashblade_name }}"
    dst_fb_name: "{{ dst_fb_info.purefb_info.default.flashblade_name }}"

- name: Facts | Set dst fileshare name for {{ repl_loop.key }}
  ansible.builtin.set_fact:
    dst_fileshare: "{{ repl_vars.dst.fileshare if repl_vars.dst.fileshare is defined else repl_vars.src.fileshare }}"
  delegate_to: localhost
  run_once: true
  become: false

- name: Replvip | Set fact for replication vip on src FlashBlade server {{ repl_loop.key }}
  ansible.builtin.set_fact:
    src_repl_vip: "{{ item.value.address }}"
  when: ( item.value.services[0] == "replication" )
  loop: "{{ src_fb_info.purefb_info.network | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Replvip | Set fact for replication vip on dst FlashBlade server {{ repl_loop.key }}
  ansible.builtin.set_fact:
    dst_repl_vip: "{{ item.value.address }}"
  when: ( item.value.services[0] == "replication" )
  loop: "{{ dst_fb_info.purefb_info.network | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Policy | Create a filesystem snapshot policy on {{ repl_vars.src.fb_name }}
  purestorage.flashblade.purefb_policy:
    name: "{{ item.name }}"
    enabled: "{{ item.enabled | default('True') }}"
    at: "{{ item.at | default(omit) }}"
    keep_for: "{{ item.keep_for | default(omit) }}"
    every: "{{ item.every | default(omit) }}"
    timezone: "{{ item.timezone | default(omit) }}"
    state: "{{ 'absent' if item.state is defined and item.state == 'disabled' else 'present' }}"
    filesystem: "{{ item.filesystem | default(omit) }}"
    replica_link: "{{ item.replica_link | default(omit) }}"
    fb_url: "{{ src_fb_url }}"
    api_token: "{{ src_fb_token }}"
  loop: "{{ combined_inventory[repl_vars.src.fb_name].filesystem_snapshot_policy | default([]) }}"
  run_once: true
  when:
    - item is defined and (item|default([])|length > 0)

- name: Vip | Create replication interface(VIP) on {{ repl_vars.src.fb_name }}
  purestorage.flashblade.purefb_network:
    name: "{{ repl_vars.src.replvip_name | default('replvip') }}"
    address: "{{ repl_vars.src.replvip }}"
    state: present
    services: replication
    fb_url: "{{ src_fb_url }}"
    api_token: "{{ src_fb_token }}"
  when:
    - src_repl_vip is not defined
    - repl_vars.src.replvip is defined

- name: Vip | Create replication interface(VIP) on {{ repl_vars.dst.fb_name }}
  purestorage.flashblade.purefb_network:
    name: "{{ repl_vars.dst.replvip_name | default('replvip') }}"
    address: "{{ repl_vars.dst.replvip }}"
    state: present
    services: replication
    fb_url: "{{ dst_fb_url }}"
    api_token: "{{ dst_fb_token }}"
  when:
    - dst_repl_vip is not defined
    - repl_vars.dst.replvip is defined

# Create replication
- name: Create remote credential and replica link for {{ repl_loop.key }}
  when: repl_vars.common_params.state is not defined or repl_vars.common_params.state == 'enabled'
  block:
    - name: Replication | Create a connection from {{ repl_vars.src.fb_name }} to remote FlashBlade {{ repl_vars.dst.fb_name }} server
      purestorage.flashblade.purefb_connect:
        state: present
        target_url: "{{ dst_fb_url }}"
        target_api: "{{ dst_fb_token }}"
        fb_url: "{{ src_fb_url }}"
        api_token: "{{ src_fb_token }}"

    - name: Replica | Create File System replica-link between {{ repl_vars.src.fb_name }} and {{ repl_vars.dst.fb_name }}
      purestorage.flashblade.purefb_fs_replica:
        name: "{{ repl_vars.src.fileshare }}"
        target_array: "{{ dst_fb_name }}"
        target_fs: "{{ repl_vars.dst.fileshare | default(omit) }}"
        policy: "{{ repl_vars.common_params.repl_policy | default(omit) }}"
        state: present
        fb_url: "{{ src_fb_url }}"
        api_token: "{{ src_fb_token }}"
      register: fs_replica_link
      retries: 3
      delay: 2
      until: fs_replica_link is not failed
